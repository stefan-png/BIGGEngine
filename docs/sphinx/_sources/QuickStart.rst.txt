.. AppI documentation file, created by
   Stefan Antoszko on Sat May  7

Quick Start
===========

Start by calling ``init()`` on the features you want to use. The minimum
required features to get a window showing are Context, GLFWContext, and Events.

.. code:: c++

   #include "Context.hpp"
   #include "ContextImplGLFW.hpp"
   #include "Events.hpp"

   int main() {
      using namespace BIGGEngine;

      Context::init();
      GLFWContext::init();
      Events::init();
   }

After initializing a context, you should set up your callbacks. This is done using ``Events::subscribe<T>()``.

.. code:: c++

   #include <cstdlib> // for std::rand()

   // create an event callback function
   bool eventCallback(WindowShouldCloseEvent event) {
      if(std::rand() % 2 == 0) {
         Context::setWindowShouldClose(false); // force the window to stay open
         return true; // returning true tells the engine the event was handled.
      }

      return false; // returning false tells the engine the event was not handled and should be propagated.
   }

   int main() {
      ...

      // subscribe to WindowShouldClose events with the callback function
      context.subscribe<WindowShouldClose>(100, eventCallback);
      // 100 is the call priority. There may be up to 99 other functions called
      // before this one.
      // eventCallback is the name of our user-defined callback function.
   }

Then, call ``context.run()``.

.. code:: c++

   ...

   int main() {
      ...

      return context.run();
   }







